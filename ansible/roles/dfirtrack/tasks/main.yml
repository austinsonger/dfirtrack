---
- name: GIT | Install git
  ansible.builtin.apt:
    name: 'git'
    state: present
  become: true
  become_method: ansible.builtin.sudo

- name: DFIRTRACK
  block:

    - name: DFIRTRACK | Clone repo
      ansible.builtin.git:
        repo: 'https://github.com/dfirtrack/dfirtrack.git'
        dest: '{{ dfirtrack_dir }}'
        version: '{{ dfirtrack_branch }}'

    - name: DFIRTRACK | Copy local_settings.py
      ansible.builtin.template:
        src: 'local_settings.py.j2'
        dest: '{{ dfirtrack_dir }}/dfirtrack/local_settings.py'
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0640'

- name: DJANGO
  block:

    - name: DJANGO | Install python dependencies
      ansible.builtin.apt:
        name:
          - 'libpq-dev'
          - 'python3-setuptools'
          - 'python3-pip'
          - 'virtualenv'
        state: present
      become: true
      become_method: ansible.builtin.sudo

    - name: DJANGO | Create subdirectory for virtual environment
      ansible.builtin.set_fact:
        venv_dir: '{{ dfirtrack_dir }}/venv'

    - name: DJANGO | Install django and requirements
      ansible.builtin.pip:
        requirements: '{{ dfirtrack_dir }}/requirements.txt'
        virtualenv_python: python3
        state: present
        virtualenv: '{{ venv_dir }}'

- name: DFIRTRACK | Create log directory
  ansible.builtin.file:
    name: '{{ log_dir }}'
    state: directory
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0755'
  become: true
  become_method: ansible.builtin.sudo

- name: MARKDOWN
  module_defaults:
    ansible.builtin.file:
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
    ansible.builtin.template:
      owner: '{{ ansible_user }}'
      group: '{{ ansible_user }}'
  block:

    - name: MARKDOWN | Install mkdocs
      ansible.builtin.apt:
        name: 'mkdocs'
        state: present
      become: true
      become_method: ansible.builtin.sudo

    - name: MARKDOWN | Create initial directory
      ansible.builtin.file:
        name: '{{ markdown_dir }}'
        state: directory
        mode: '0755'

    - name: MARKDOWN | Check for existing project
      ansible.builtin.stat:
        path: '{{ markdown_dir }}/{{ markdown_proj }}/'
      register: markdown_exists

    - name: MARKDOWN | Init project
      ansible.builtin.command:
        chdir: '{{ markdown_dir }}'
        cmd: 'mkdocs new {{ markdown_proj }}'
      environment:
        LC_ALL: 'C.UTF-8'
      when: not markdown_exists.stat.exists

    - name: MARKDOWN | Create subdirectory for systems
      ansible.builtin.file:
        name: '{{ markdown_dir }}/{{ markdown_proj }}/docs/systems/'
        state: directory
        mode: '0755'

    - name: MARKDOWN | Copy mkdocs.yml
      ansible.builtin.template:
        src: 'mkdocs.yml.j2'
        dest: '{{ markdown_dir }}/{{ markdown_proj }}/mkdocs.yml'
        mode: '0644'

- name: POSTGRESQL
  become: true
  become_method: ansible.builtin.sudo
  block:

    - name: POSTGRESQL | Install psycopg2 to make ansible talk with postgresql (Ubuntu 20)
      ansible.builtin.apt:
        name: 'python3-psycopg2'

    - name: POSTGRESQL | Install acl to make user switching work (Ubuntu 20)
      ansible.builtin.apt:
        name: 'acl'
      when: (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.04') or (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.10') or (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '21.10') or (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04')

    - name: POSTGRESQL | Install postgresql
      ansible.builtin.apt:
        name: 'postgresql'

    - name: POSTGRESQL | Change password of user postgres
      community.general.postgresql_user:
        name: 'postgres'
        password: '{{ postgresql_postgres_password }}'
        encrypted: true
      become_user: 'postgres'
      ignore_errors: '{{ ansible_check_mode }}'

    # CREATEDB necessary for creating test database
    - name: POSTGRESQL | Create dedicated user
      community.general.postgresql_user:
        name: '{{ postgresql_user }}'
        password: '{{ postgresql_user_password }}'
        encrypted: true
        role_attr_flags: CREATEDB
      become_user: 'postgres'
      ignore_errors: '{{ ansible_check_mode }}'

    - name: POSTGRESQL | Create database
      community.general.postgresql_db:
        name: '{{ postgresql_database }}'
        owner: '{{ postgresql_user }}'
      become_user: 'postgres'
      ignore_errors: '{{ ansible_check_mode }}'

    - name: POSTGRESQL | Create backup directory
      ansible.builtin.file:
        name: '{{ postgresql_backup_dir }}'
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0755'

    - name: POSTGRESQL | Set path of config (Ubuntu 18.04)
      ansible.builtin.set_fact:
        postgresql_config: '/etc/postgresql/10/main/pg_hba.conf'
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '18.04'

    - name: POSTGRESQL | Set path of config (Ubuntu 20)
      ansible.builtin.set_fact:
        postgresql_config: '/etc/postgresql/12/main/pg_hba.conf'
      when: (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.04') or (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '20.10')

    - name: POSTGRESQL | Set path of config (Ubuntu 21.10)
      ansible.builtin.set_fact:
        postgresql_config: '/etc/postgresql/13/main/pg_hba.conf'
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '21.10'

    - name: POSTGRESQL | Set path of config (Ubuntu 22.04)
      ansible.builtin.set_fact:
        postgresql_config: '/etc/postgresql/14/main/pg_hba.conf'
      when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '22.04'

    - name: POSTGRESQL | Edit config for backup
      ansible.builtin.replace:
        name: '{{ postgresql_config }}'
        regexp: '^local   all             all                                     peer'
        replace: 'local   all             all                                     md5'
      notify:
        - POSTGRESQL | Restart PostgreSQL
      ignore_errors: '{{ ansible_check_mode }}'

# not part of the block before because not done in 'root' context
- name: POSTGRESQL | Create backup cron job
  ansible.builtin.cron:
    name: 'dfirtrack'
    user: '{{ ansible_user }}'
    job: 'PGPASSWORD="{{ postgresql_user_password }}" /usr/bin/pg_dump -U {{ postgresql_user }} {{ postgresql_database }} > {{ postgresql_backup_dir }}/`date --utc +\\%Y\\%m\\%d_\\%H\\%M`_{{ postgresql_database }}.sql'
    minute: '00'
    hour: '*'
    dom: '*'
    month: '*'
    dow: '*'

- name: NGINX
  become: true
  become_method: ansible.builtin.sudo
  block:

    - name: NGINX | Install nginx
      ansible.builtin.apt:
        name: 'nginx'
        state: present

    - name: NGINX | Make SSL directory
      ansible.builtin.file:
        path: '/etc/nginx/ssl/'
        state: directory
        owner: 'root'
        group: 'root'
        mode: '0755'

    - name: NGINX | Check for existing certificates
      ansible.builtin.stat:
        path: '/etc/nginx/ssl/nginx.crt'
      register: certificate_exists

    - name: NGINX | Create self signed certificates for SSL
      ansible.builtin.command: 'openssl req -newkey rsa:4096 -days 365 -nodes -x509 -subj "/O={{ openssl_o }}/CN={{ fqdn }}/OU={{ openssl_ou }}" -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt'
      when: not certificate_exists.stat.exists

    - name: NGINX | Remove server tokens
      ansible.builtin.replace:
        path: '/etc/nginx/nginx.conf'
        regexp: '# server_tokens off;'
        replace: 'server_tokens off;'
      ignore_errors: '{{ ansible_check_mode }}'

    - name: NGINX | Copy nginx-config
      ansible.builtin.template:
        src: 'default.j2'
        dest: '/etc/nginx/sites-available/default'
        owner: 'root'
        group: 'root'
        mode: '0644'
      notify:
        - NGINX | Restart nginx

    - name: NGINX | Create directory of webserver files
      ansible.builtin.file:
        name: '{{ www_dir }}/static/'
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: '0755'

- name: DJANGO
  module_defaults:
    community.general.django_manage:
      virtualenv: '{{ venv_dir }}'
  block:
    - name: DJANGO | Migrate
      community.general.django_manage:
        command: 'migrate'
        project_path: '{{ dfirtrack_dir }}'

    - name: DJANGO | Create cache table
      community.general.django_manage:
        command: 'createcachetable'
        project_path: '{{ dfirtrack_dir }}'

    - name: DJANGO | Collect static files
      community.general.django_manage:
        command: 'collectstatic'
        project_path: '{{ dfirtrack_dir }}'

- name: NGINX | Change ownership of webserver files
  ansible.builtin.file:
    name: '{{ www_dir }}'
    owner: 'www-data'
    group: 'www-data'
    recurse: true
  become: true
  become_method: ansible.builtin.sudo

- name: SERVICES
  module_defaults:
    ansible.builtin.template:
      owner: 'root'
      group: 'root'
  become: true
  become_method: ansible.builtin.sudo
  block:

    - name: GUNICORN | Create file for service
      ansible.builtin.template:
        src: 'gunicorn.service.j2'
        dest: '/etc/systemd/system/gunicorn.service'
        mode: '0640'

    - name: QCLUSTER | Create file for service
      ansible.builtin.template:
        src: 'qcluster.service.j2'
        dest: '/etc/systemd/system/qcluster.service'
        mode: '0640'

    - name: SYSTEMCTL | Reload systemctl daemon
      ansible.builtin.systemd:
        daemon-reload: true

    - name: GUNICORN | Enable and start service
      ansible.builtin.systemd:
        name: 'gunicorn'
        enabled: true
        state: started
      ignore_errors: '{{ ansible_check_mode }}'

    - name: QCLUSTER | Enable and start service
      ansible.builtin.systemd:
        name: 'qcluster'
        enabled: true
        state: started
      ignore_errors: '{{ ansible_check_mode }}'

- name: UFW
  become: true
  become_method: ansible.builtin.sudo
  block:

    - name: UFW | Install ufw
      ansible.builtin.apt:
        name: 'ufw'
        state: present

    - name: UFW | Deny incoming traffic
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: UFW | Allow outgoing traffic
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: UFW | Allow ssh
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: UFW | Enable extensive logging
      community.general.ufw:
        logging: 'high'

    - name: UFW | limit login rate for ssh
      community.general.ufw:
        rule: limit
        port: 22
        proto: tcp

    - name: UFW | Allow http
      community.general.ufw:
        rule: allow
        port: 80

    - name: UFW | Allow https
      community.general.ufw:
        rule: allow
        port: 443

    - name: UFW | Enable firewall
      community.general.ufw:
        state: enabled
